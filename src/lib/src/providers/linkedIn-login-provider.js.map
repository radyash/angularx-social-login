{"version":3,"file":"linkedIn-login-provider.js","sourceRoot":"","sources":["linkedIn-login-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseLoginProvider } from '../entities/base-login-provider';\nimport { SocialUser } from '../entities/user';\nimport { LoginOpt } from '../auth.service';\n\ndeclare let IN: any;\n\nexport class LinkedInLoginProvider extends BaseLoginProvider {\n\n    public static readonly PROVIDER_ID: string = 'LINKEDIN';\n\n    constructor(\n        private clientId: string,\n        private authorize?: boolean,\n        private lang?: string,\n        private fields: string = 'id,first-name,last-name,email-address,picture-url'\n    ) {\n        super();\n    }\n\n    initialize(): Promise<void> {\n        let inner_text = '';\n\n        inner_text += 'api_key: ' + this.clientId + '\\r\\n';\n        inner_text += 'authorize:' + (this.authorize ? 'true' : 'false') + '\\r\\n';\n        inner_text += 'lang: ' + (this.lang ? this.lang : 'fr_FR') + '\\r\\n';\n\n        return new Promise((resolve, reject) => {\n            this.loadScript(LinkedInLoginProvider.PROVIDER_ID,\n                '//platform.linkedin.com/in.js',\n                () => {\n                    let that = this;\n                    setTimeout(() => {\n                        this._readyState.next(true);\n                        resolve();\n                    }, 800);\n                }, false, inner_text);\n        });\n    }\n\n    getLoginStatus(): Promise<SocialUser> {\n        return new Promise((resolve, reject) => {\n            this.onReady().then(() => {\n                if (IN.User.isAuthorized()) {\n                    IN.API.Raw(`/people/~:(${this.fields})`).result((res: any) => {\n                        let user: SocialUser = new SocialUser();\n                        user.id = res.id;\n                        user.name = res.firstName + ' ' + res.lastName;\n                        user.email = res.emailAddress;\n                        user.photoUrl = res.pictureUrl;\n                        user.firstName = res.firstName;\n                        user.lastName = res.lastName;\n                        user.authToken = IN.ENV.auth.oauth_token;\n                        user.linkedIn = res;\n\n                        resolve(user);\n                    });\n                } else {\n                    reject('No user is currently logged in.');\n                }\n            });\n        });\n    }\n\n    signIn(): Promise<SocialUser> {\n        return new Promise((resolve, reject) => {\n            this.onReady().then(() => {\n                IN.User.authorize(() => {\n                    IN.API.Raw(`/people/~:(${this.fields})`).result((res: any) => {\n                        let user: SocialUser = new SocialUser();\n                        user.id = res.id;\n                        user.name = res.firstName + ' ' + res.lastName;\n                        user.email = res.emailAddress;\n                        user.photoUrl = res.pictureUrl;\n                        user.firstName = res.firstName;\n                        user.lastName = res.lastName;\n                        user.authToken = IN.ENV.auth.oauth_token;\n\n                        user.linkedIn = res;\n\n                        resolve(user);\n                    });\n                });\n            });\n        });\n    }\n\n    signOut(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.onReady().then(() => {\n                IN.User.logout(() => {\n                    resolve();\n                }, {});\n            });\n        });\n    }\n}\n"]}